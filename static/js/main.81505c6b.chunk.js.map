{"version":3,"sources":["components/Header.js","components/About.js","components/Project.js","components/Projects.js","components/Main.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","toggle-data","toggle-target","id","to","style","boxShadow","marginTop","padding","href","target","props","textAlign","width","margin","title","description","link","details","projectData","textTransform","map","value","Project","Main","path","exact","Projects","About","React","Component","App","Boolean","window","location","hostname","match","bowserHistory","createBrowserHistory","ReactDOM","render","StrictMode","history","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0QAGe,SAASA,IACpB,OACI,yBAAKC,UAAU,qCACX,uBAAGA,UAAU,gBAAb,gBACA,4BAAQA,UAAU,iBAAkBC,cAAY,WAAWC,gBAAc,oBACrE,0BAAMF,UAAU,yBAEpB,yBAAKA,UAAU,2BAA2BG,GAAG,mBACzC,wBAAIH,UAAU,sBACV,wBAAIA,UAAU,YAAW,kBAAC,IAAD,CAAMA,UAAU,WAAWI,GAAG,UAA9B,UACzB,wBAAIJ,UAAU,YAAW,kBAAC,IAAD,CAAMA,UAAU,WAAWI,GAAG,aAA9B,gB,WCV9B,aACX,OACA,yBAAKC,MAAO,CACRC,UAAW,wCACXC,UAAW,GACXC,QAAS,KAEV,8CAAmB,6BAAM,6BAAzB,4QAIA,6BAAM,6BAJN,sHAQA,6BAAM,6BARN,4LAcC,uBAAGC,KAAK,yBAAyBC,OAAO,UAAxC,kBAEA,6BAhBD,IAgBQ,6BAhBR,IAgBe,6BAhBf,cAiBY,kBAAC,IAAD,CAAMN,GAAG,aAAT,YAjBZ,mBCRQ,WAASO,GACpB,OACI,yBAAKN,MAAO,CACRG,QAAS,GACTI,UAAW,QACXN,UAAW,wCACXO,MAAO,OACPC,OAAQ,WAER,4BAAKH,EAAMI,OACX,2BAAIJ,EAAMK,aACV,uBAAGhB,UAAU,oCAAoCS,KAAME,EAAMM,MAA7D,eACA,uBAAGjB,UAAU,oCAAoCS,KAAME,EAAMO,SAA7D,kBCVG,aACX,IAKMC,EAAc,CAChB,CACIhB,GAAI,MACJY,MAAO,cACPC,YAAY,uOAKZC,KAAM,gDACNC,QAAS,yBAEb,CACIf,GAAI,MACJY,MAAO,uBACPC,YAAY,+OAKZC,KAAM,uDACNC,QAAS,KAEb,CACIf,GAAI,MACJY,MAAO,mBACPC,YAAY,0KAIZC,KAAM,+CACNC,QAAS,MAUjB,OAAQ,yBAAKb,MAAO,CAACO,UAAW,WAC7B,wBAAIP,MAAO,CAACS,OAAQ,SAAUM,cAAe,cAA7C,uDANQD,EAAYE,KAAI,SAACC,GACpB,OAAO,kBAACC,EAAD,CAASR,MAAOO,EAAMP,MAAOZ,GAAImB,EAAMnB,GAAIc,KAAMK,EAAML,KAAMD,YAAaM,EAAMN,YAAaE,QAASI,EAAMJ,eCnBhHM,E,uKAjBP,OAAQ,6BACD,kBAACzB,EAAD,MACA,yBAAKC,UAAU,mBACX,kBAAC,IAAD,KACK,kBAAC,IAAD,CAAOyB,KAAK,YAAYC,OAAK,GACzB,kBAACC,EAAD,OAEJ,kBAAC,IAAD,CAAOF,KAAK,KACR,kBAACG,EAAD,c,GAXTC,IAAMC,WCAVC,MAJf,WACE,OAAO,kBAAC,EAAD,OCOWC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,kBCRAC,EAAgBC,cACtBC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAeC,QAASL,GACtB,kBAAC,EAAD,QAGJM,SAASC,eAAe,SDkHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.81505c6b.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom'\n\nexport default function Header() {\n    return (\n        <nav className='navbar navbar-expand navbar-light'>\n            <a className='navbar-brand'>Manuver Khan</a>\n            <button className='navbar-toggler'  toggle-data='collapse' toggle-target='#supportedNavbar'>\n                <span className='navbar-toggler-icon'></span>\n            </button>\n            <div className='navbar-collapse collapse' id='supportedNavbar'>\n                <ul className='navbar-nav mr-auto'>\n                    <li className='nav-item'><Link className='nav-link' to='/about'>About</Link></li>\n                    <li className='nav-item'><Link className='nav-link' to='/projects'>Projects</Link></li>\n                </ul>\n            </div>\n        </nav>\n    );\n}","import React from 'react'\nimport { Link } from 'react-router-dom'\n\nexport default function() {\n    return (\n    <div style={{\n        boxShadow: \"1px 1px 10px rgba(177, 177, 177, 0.3)\",\n        marginTop: 30,\n        padding: 20\n    }}>\n       <p>Hi! I'm Manuver <br /><br /> An ordinary Computer Science Student with\n       huge Interest in Computers. I have worked with lowest level (x86 assembly, C) to \n       the higher level languages (Python, JavaScript). Also I am well experienced \n       in Backend developement and worked with PHP, Django, Express etc.\n       <br /><br />\n\n       I have also worked on Frontend from scratch using CSS, JavaScript. And also\n       using Frameworks like React, Bootstrap.\n       <br /><br />\n\n       I also have good understanding of Data Structures and Algorithms and how to use \n       them in developement for efficiancy.\n\n       I'm currently studying in Final year of B.Tech (Computer Science) in \n        <a href='https://mmumullana.org' target='_blank'> MM University</a>\n\n        <br /> <br /> <br />\n        Please see <Link to='/projects'>Projects</Link> for my work.\n       </p>\n    </div>);\n}","import React from 'react';\n\nexport default function(props) {\n    return (\n        <div style={{\n            padding: 20, \n            textAlign: \"start\", \n            boxShadow: \"1px 1px 10px rgba(170, 170, 170, 0.4)\",\n            width: '100%',\n            margin: '15px 0'\n            }}>\n            <h5>{props.title}</h5>\n            <p>{props.description}</p>\n            <a className='btn btn-outline-primary my-1 mr-2' href={props.link}>Github Link</a> \n            <a className='btn btn-outline-success my-1 mr-1' href={props.details}>More Details</a>\n        </div>\n    )\n}","import React from 'react'\nimport Project from './Project';\n\n\nexport default function() {\n    let styles = {\n        width: '80%',\n        margin: '50px 10%',\n    }\n\n    const projectData = [\n        {\n            id: \"jws\",\n            title: \"VAHM Server\",\n            description: `\n            VAHM is a is basic Java Web server without any external \n            dependancies. VAHM supports GET/POST requests. It is developed\n            using Java Socket API. It is currently in Developement\n            `,\n            link: \"https://github.com/ManuverGujjar/VAHM-Server/\",\n            details: \"/projects/vahm-server\"\n        },\n        {\n            id: \"ldm\",\n            title: \"LAN Download Manager\",\n            description: `\n            LAN (Local Area Network) Download Manager is used to download a\n            file in multiple parts in different computer system and then merges \n            them together to create the actual download file \n            `,\n            link: \"https://github.com/ManuverGujjar/LANDownloadManager/\",\n            details: \"#\"\n        },\n        {\n            id: \"jds\",\n            title: \"JustDial Scraper\",\n            description: `\n            JustDial Scraper is a project which is use to scrape JustDial dynamically\n            added data to DOM. then exports it into JSON format \n            `,\n            link: \"https://github.com/ManuverGujjar/jd-scraper/\",\n            details: \"#\"\n        }\n    ]\n\n    function getProjectElements() {\n        return projectData.map((value) => {\n            return <Project title={value.title} id={value.id} link={value.link} description={value.description} details={value.details} />\n        })\n    }\n\n    return (<div style={{textAlign: \"center\"}}>\n       <h5 style={{margin: '30px 0', textTransform: 'uppercase'}}>These are some of my projects i developed over time</h5>\n       {getProjectElements()}\n    </div>);\n}","import React from 'react';\nimport Header from './Header';\nimport { Switch, Route } from 'react-router';\n\nimport Home from './Home';\nimport About from './About';\nimport Projects from './Projects';\n\nclass Main extends React.Component {\n\n    render() {\n        return (<div>\n               <Header /> \n               <div className='container-fluid'>\n                   <Switch>\n                        <Route path='/projects' exact>\n                            <Projects />\n                        </Route>\n                        <Route path='/'>\n                            <About />\n                        </Route>\n                    </Switch>\n               </div>\n        </div>);\n    }\n}\n\n\nexport default Main;","import React from 'react';\nimport './App.css';\nimport Main from './components/Main';\n\nfunction App() {\n  return <Main />\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css'\nimport { createBrowserHistory } from 'history'\nimport { BrowserRouter } from 'react-router-dom';\n\n\nconst bowserHistory = createBrowserHistory();\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter history={bowserHistory}>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}